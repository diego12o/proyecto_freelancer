/*
    (*) selector {propiedad: valor;}
    (*) en vez de usar px o en, se utiliza rem ya que se adapta a distintos tamaños de las tecnologías

    (*) el configurar el html y body como se muestra genera que la conversión de rem a px
    sea de 1 rem = 10px haciendo más fácil el manejo de la unidad de medida

    (*) Selectores: 
        - de elemento -> según etiqueta
        - de clase (inicia con punto)
        - de ID (inicia con #)-> id no puede repetirse
        - de atributo -> según un atributo que tenga algún elemento
    (*) Combinación de descendentes -> selecciona los elementos hijos cuyo padre sea una clase o id en específico
    (*) todos los hijos -> aplica la regla a todos los elementos hijos
        ej: .cliente > p{
            color: blue;
        }
        aplica color azul a todos los parrafos de los elementos pertenecientes a la clase cliente
    (*) especificidad -> es el cómo el navegador mostrará el css respecto a qué tan específico es el selector creado. Con ello, se puede modificar un selector y se tendrá preferencia la especificidad antes que la cascada

    (*)color en css:
        -> por nombre
        -> valor hexadecimal
        -> rgb(): red, green and blue
        -> hsl()
        
    (*) página font de google para ver distintas fuentes
        -> se utiliza en font-family la fuente de google
        -> se ajusta al tamaño elegido en la página

    (*)display: block -> los elementos se colocarán unos
                        debajo de los otros
                        ej: parrafos, div, etc
    (*)display inline -> los elementos se posicionarán a la
                        derecha una vez que hayan tomado el 
                        espacio que requieren
                        ej: los enlaces del nav
    - no es necesario modificar el display a no ser que 
    se requiera

    (*)Cómo elegir entre flexbox y css grid
        -> flexbox : para alineación o distribución de los elementos dentro de contenedores
        -> css grid : para definir Layouts (como columnas o contenedores de elementos)

        (*) lo de flexbox lo puede hacer grid, pero a veces es más sencillo con flexbox y otras con grid

    (*) NUNCA USAR FLOAT -> internet explorer

    (*) en CSS se pueden usar como atributos los type
        ej: 
            .campo input[type="text"],
            .campo input[type="tel"]{
                background-color: red;
            }
*/

/* 
    paleta de colores (root)
    = custom properties
*/
:root{
    --blanco: #ffffff;
    --oscuro: #212121;
    --primario: #E6B61E;
    --secundario: #05B6A9;
    --gris: #757575;
    --grisClaro: #DFE9F3;
}
html {
    font-size: 62.5%;
    box-sizing: border-box;
}

/*
    * : selecciona todos los elementos de html
    , : ayuda para ahorrar líneas de código en caso de que algunos selectores coincidan en propiedades
    before|after : define algo antes o después del selector y que no es posible de seleccionar  
*/
*, *:before, *:after {
    /*esto es para css box model (tambien lo de box-sizing)*/
    box-sizing: inherit;
}

body {
    font-size: 16px;
    font-family: 'Oswald', sans-serif;
    background-image: linear-gradient(to top, var(--grisClaro) 0%, var(--blanco) 100%);
}

h1 {
    font-size: 3.8rem;
}

h2{
    font-size: 2.8rem;
}

h3{
    font-size: 1.8rem;
}

h1, h2, h3 {
    text-align: center;
}

.titulo span {
    font-size: 2rem;
}

/*magin left y right al definirlos automaticos, se ponen 
centrados
margin: w x y z -> w top, x right, y bot, z left
si w=y y x=z, entonces margin: w x*/
.contenedor{
    max-width: 120rem;
    margin: 0 auto;
}

.sombra{
    -webkit-box-shadow: -9px 9px 21px -5px rgba(120,104,120,1);
    -moz-box-shadow: -9px 9px 21px -5px rgba(120,104,120,1);
    box-shadow: -9px 9px 21px -5px rgba(120,104,120,1);
    background-color: var(--blanco);
    padding: 2rem;
    border-radius: 1rem;
}

.boton{
    background-color: var(--secundario);
    color: var(--blanco);
    padding: 1rem 3rem;
    margin-top: 1rem;
    font-size: 2rem;
    text-decoration: none; /*quita la linea del enlace*/
    text-transform: uppercase; /*transforma en mayuscula*/
    font-weight: bold;
    border-radius: .5rem; /*darle esquinas circulares al boton*/
    width: 90%;
    text-align: center;
    border: none;
}

@media (min-width: 768px) {
    .boton{
        width: auto;
    }
}

.boton:hover{
    cursor: pointer;
}

.nav-bg{
    background-color: var(--secundario);
}

/*padding: 1rem -> padding: 1rem 1rem 1rem 1rem
display: flex -> habilita flex box
    flexbox es unidireccional (fila o columna)
        -> row o row-reverse los elementos hijos se colocarán
        de izquierda a derecha uno junto al otro
        ->column o column-reverse los elementos se colocarán
        de arriba hacia abajo
        FLEXBOX sirve para alinear los elementos, no para animación ni textos*/
        

.nav-principal{
    display: flex;
    flex-direction: column;
}

@media (min-width: 768px) {
    .nav-principal{
        flex-direction: row;
        justify-content: space-around;
    }

    .servicios{
        display: grid; /*agrega las funciones de css grid*/
        /*contenido se agrega dentro de un área definida con posibilidad de 1 o 2 dimensiones con grid, a diferencia de flexbox que
        se agrega automaticamente en 1 dimensión
        --se pueden usar en un mismo diseño*/
    
        /*grid-template-columns: 1fr 1fr 1fr; 1fr = 1 fraccion*/
        /*grid-template-rows: 20rem 80rem;*/
    
        /*para reemplazar columns y rows se puede usar grid: 20rem 80rem / 30 rem 30 rem 30 rem; */
    
        /*se simplifica usando repeat:*/
        grid-template-columns: repeat(3, 1fr); /*repite 3 veces 1 fr*/
        column-gap: 1rem;

    }
}


.servicio{
    align-content: center;
    display: flex;
    flex-direction: column;
    align-items: center;
}


.servicio p{
    line-height: 2;
    font-weight: normal;
}

.servicio .iconos{
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.nav-principal a{
    text-align: center;
    color: var(--blanco);
    text-decoration: none;
    font-size: 2rem;
    font-weight: 700;
    padding: 1rem;
}

/*para definir un evento en el enlace*/
.nav-principal a:hover{
    background-color: var(--primario);
    color: var(--oscuro);
}

/*
    Para hacer al sitio web adaptable a todos los tamaños de pantalla se utiliza responsive web design
    -> esto se logra con media queries
        sintaxis: @media (min-width: 768 px){
            body{
                background-color: blue;
            }
        }

        -> esto define que a partir de los 768 px en adelante, el color del fondo del sitio será azul


        media queries estándar:
            -> celulares: min-width: 480px
            -> tablets: min-width: 768px
            -> laptops o pc de escritorio: min-width: 1140px
*/

/*
    CSS box model -> lo que se muestra en pantalla está delimitado por 4 cosas:
                    (*)tamaño contenido
                    (*)padding
                    (*)tamaño borde
                    (*)margen
*/
.hero {
    background-image: url(../img/imagen0.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 450px;
    position: relative;
    
    margin-bottom: 2rem;
}

.contenido-hero {
    position: absolute;
    background-color: rgb( 0,0,0, .1); /* Anterior */
    background-color: rgb( 0 0 0 / 70%); /* Nueva */
    width: 100%;
    height: 100%;

    display: flex; /* iniciar flex box */
    flex-direction: column;
    align-items: center; /* alinear horizontalmente */
    justify-content: center; /* alinear verticalmente */
}

.contenido-hero h2,
.contenido-hero p{
    color: var(--blanco);
}

.formulario{
    background-color: var(--gris);
    width: min(70rem, 100%); /** utiliza valor más pequeño **/
    margin: 0 auto;
    padding: 2rem;
    border-radius: 1rem;
}

.formulario fieldset{
    border: none;
}

.formulario legend{
    text-align: center;
    font-size: 2rem;
    text-transform: uppercase;
    font-weight: 700;
    margin-bottom: 2rem;
}



.campo{
    margin-bottom: 1rem;
}

.campo label{
     color: var(--blanco);
     font-weight: bold;
     margin-bottom: .5rem;
     display: block;
}

.campo textarea{
    height: 15rem;
}

.input-text{
    width: 100%;
    border: none;
    padding: 1.2rem;
    border-radius: .5rem;
}

.w-sm-100{
    width: 100%;
}

.flex{
    display:flex;
}
.alinear-derecha{
    justify-content: flex-end;
}

@media (min-width: 768px) {
    .w-sm-100{
        width:auto;
    }

    .contenedor-campos{
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: auto auto 20rem;
        column-gap: 1rem;
    }

    .campo:nth-child(3),
    .campo:nth-child(4){
        grid-column: 1 / 3;
    }
}

.footer{
    text-align: center;
}


/*
.ubicacion{
    display: flex;
    align-items: flex-end;
}*/





/*
    diferentes modos de escribir código css:
        (1) BEM 
        (2) utility first
        (3) módulo

    estas las más comunes

    1. BEM -> bloques, elementos, modificadores
            ej: 
                .card{}           -> bloque
                .card__titulo{}   -> elementos
                .card__imagen{}   -> elementos
                .card__boton{}    -> elementos
                .card__boton--activo{} -> modificadores
    
    2. Utility first -> se crean clases con una sola propiedad
        ej: 
            .text-center{}
            .color-red-100 {}
            etc
    
    3. Modulo -> se define contenido principal y luego se 
                seleccionan los elementos
                ej: 
                    .card{}
                    .card h2{}
                    .card img{}
                    etc


*/